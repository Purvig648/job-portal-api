// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=cache_mock.go -package=caching
//
// Package caching is a generated GoMock package.
package caching

import (
	context "context"
	models "job-application-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddCache mocks base method.
func (m *MockCache) AddCache(ctx context.Context, jid uint, jobData models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCache", ctx, jid, jobData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCache indicates an expected call of AddCache.
func (mr *MockCacheMockRecorder) AddCache(ctx, jid, jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCache", reflect.TypeOf((*MockCache)(nil).AddCache), ctx, jid, jobData)
}

// FetchCache mocks base method.
func (m *MockCache) FetchCache(ctx context.Context, jid uint) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCache", ctx, jid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCache indicates an expected call of FetchCache.
func (mr *MockCacheMockRecorder) FetchCache(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCache", reflect.TypeOf((*MockCache)(nil).FetchCache), ctx, jid)
}
